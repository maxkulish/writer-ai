name: Swift App Release

on:
  push:
    tags:
      - 'v*'

# These permissions are needed for the GitHub token
permissions:
  contents: write      # Required for creating releases and uploading assets

jobs:
  build-macos-app:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin
          
      - name: Build universal Rust binary
        working-directory: ./rust_service
        run: |
          cargo build --release --target x86_64-apple-darwin
          cargo build --release --target aarch64-apple-darwin
          mkdir -p target/universal-apple-darwin/release
          lipo -create \
            target/x86_64-apple-darwin/release/writer_ai_rust_service \
            target/aarch64-apple-darwin/release/writer_ai_rust_service \
            -output target/universal-apple-darwin/release/writer_ai_rust_service
      
      - name: Build Swift app
        run: |
          cd swift_agent/WriterAIHotkeyAgent
          xcodebuild -project WriterAIHotkeyAgent.xcodeproj -scheme WriterAIHotkeyAgent -configuration Release -destination 'platform=macOS' clean build
          
      - name: Package app with Rust service
        run: |
          # Run package_app.sh but don't fail if it has issues
          ./package_app.sh || echo "Package script had non-zero exit code, continuing with manual steps"
        
      - name: Prepare App Bundle
        run: |
          echo "Preparing app bundle for DMG creation..."
          mkdir -p "./release"
          
          # Find the built app
          BUILT_APP=$(find ~/Library/Developer/Xcode/DerivedData -name "WriterAIHotkeyAgent.app" -type d -path "*/Build/Products/Release/*" | head -n 1)
          
          if [ -z "$BUILT_APP" ]; then
            echo "Error: Could not find built app"
            find ~/Library/Developer/Xcode/DerivedData -name "*.app" -type d
            exit 1
          fi
          
          echo "Found built app at: $BUILT_APP"
          
          # Make sure the release directory is clean
          rm -rf "./release/WriterAI.app" "./release/WriterAIHotkeyAgent.app"
          
          # Copy the built app to the release directory
          cp -R "$BUILT_APP" "./release/WriterAI.app"
          
          # Verify the app was copied
          if [ ! -d "./release/WriterAI.app" ]; then
            echo "Error: Failed to copy app to release directory"
            ls -la "./release/"
            exit 1
          fi
          
          # Add Rust service to the app bundle
          mkdir -p "./release/WriterAI.app/Contents/Resources/rust_service"
          cp "./rust_service/target/universal-apple-darwin/release/writer_ai_rust_service" "./release/WriterAI.app/Contents/Resources/rust_service/"
          
          echo "App bundle prepared successfully"
          ls -la "./release/WriterAI.app/Contents/Resources/rust_service/"
      
      - name: Create DMG
        run: |
          echo "Creating DMG file..."
          
          # Ensure the app exists
          if [ ! -d "./release/WriterAI.app" ]; then
            echo "Error: WriterAI.app not found in release directory"
            ls -la "./release/"
            exit 1
          fi
          
          # Create the DMG
          hdiutil create -volname "WriterAI" -srcfolder "./release/WriterAI.app" -ov -format UDZO "./release/WriterAI.dmg"
          
          # Verify the DMG was created
          if [ ! -f "./release/WriterAI.dmg" ]; then
            echo "Error: Failed to create DMG file"
            exit 1
          fi
          
          echo "DMG created successfully at ./release/WriterAI.dmg"
          ls -la "./release/"
          
      - name: Upload DMG to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ./release/WriterAI.dmg
          draft: false
          generate_release_notes: true
          name: Release ${{ github.ref_name }}