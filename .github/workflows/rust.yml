name: Rust CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./rust_service
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rust_service/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('rust_service/Cargo.lock') }}
          
      - name: Run tests
        run: cargo test --manifest-path=rust_service/Cargo.toml
  
  build:
    name: Build Binary
    needs: test
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ./rust_service
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: writer_ai_rust_service-linux-amd64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: writer_ai_rust_service-macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            name: writer_ai_rust_service-macos-arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Add target for ARM macOS build
        if: matrix.target == 'aarch64-apple-darwin'
        run: rustup target add aarch64-apple-darwin
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --manifest-path=rust_service/Cargo.toml
      
      - name: Prepare binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/writer_ai_rust_service.exe ../${{ matrix.name }}.exe
          else
            cp target/${{ matrix.target }}/release/writer_ai_rust_service ../${{ matrix.name }}
          fi
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}*
          
  create-release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            writer_ai_rust_service-linux-amd64/writer_ai_rust_service-linux-amd64
            writer_ai_rust_service-macos-intel/writer_ai_rust_service-macos-intel
            writer_ai_rust_service-macos-arm64/writer_ai_rust_service-macos-arm64
          draft: false
          prerelease: false
          generate_release_notes: true